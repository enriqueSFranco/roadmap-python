"""
  ================ Singleton ================
  Singleton es un patr√≥n de dise√±o creacional que garantiza que tan solo exista un objeto de su tipo y proporciona un √∫nico punto de acceso a √©l para cualquier otro c√≥digo.
  
  Aplicabilidad
  
  ü™≤ Utiliza el patr√≥n Singleton cuando una clase de tu programa tan solo deba tener una instancia disponible para todos los clientes; por ejemplo, un √∫nico objeto de base de datos compartido por distintas partes del programa.

  ‚ö°Ô∏è El patr√≥n Singleton deshabilita el resto de las maneras de crear objetos de una clase, excepto el m√©todo especial de creaci√≥n. Este m√©todo crea un nuevo objeto, o bien devuelve uno existente si ya ha sido creado.

  ü™≤ Utiliza el patr√≥n Singleton cuando necesites un control m√°s estricto de las variables globales.

  ‚ö°Ô∏è Al contrario que las variables globales, el patr√≥n Singleton garantiza que haya una √∫nica instancia de una clase. A excepci√≥n de la propia clase Singleton, nada puede sustituir la instancia en cach√©.

  Ten en cuenta que siempre podr√°s ajustar esta limitaci√≥n y permitir la creaci√≥n de cierto n√∫mero de instancias Singleton. La √∫nica parte del c√≥digo que requiere cambios es el cuerpo del m√©todo getInstance.



  üìã C√≥mo implementarlo
  
  1.- A√±ade un campo est√°tico privado a la clase para almacenar la instancia Singleton.
  2.- Declara un m√©todo de creaci√≥n est√°tico p√∫blico para obtener la instancia Singleton.
  3.- Implementa una inicializaci√≥n diferida dentro del m√©todo est√°tico. Debe crear un nuevo objeto en su primera llamada y colocarlo dentro del campo est√°tico. El m√©todo deber√° devolver siempre esa instancia en todas las llamadas siguientes.
  4.- Declara el constructor de clase como privado. El m√©todo est√°tico de la clase seguir√° siendo capaz de invocar al constructor, pero no a los otros objetos.
  5.- Repasa el c√≥digo cliente y sustituye todas las llamadas directas al constructor de la instancia Singleton por llamadas a su m√©todo de creaci√≥n est√°tico.
"""